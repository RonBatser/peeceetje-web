const SHORT_MONTH_NAMES = ["Jan", "Feb", "Mrt", "Apr", "Mei", "Jun",  "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"];function initEvents() {    const $events = $('#facebook-events');    if ($events.length > 0) {        fetchEvents();        $(window).on("resize", onWindowResizeCheckExpandables)    }}/*Fetching and handling events from Facbook API*/function fetchEvents() {    const url = '/FacebookEvents';    fetch(url)        .then(function (result) {            return result.json();        })        .then(handleFetchFacebookEvents)        .catch(handleFetchFacebookEventsFailed);}const handleFetchFacebookEvents = function (data) {    const $currentEvents = $('.current-events .events');    const $archivedEvents = $('.archived-events .events');    data.forEach(function (event) {        const endDate = new Date(event.end_time);        const startDate = new Date(event.start_time);        const currentDate = new Date();        const currentEvent = endDate >= currentDate;        const $eventArticle = buildEventArticle(event, startDate, currentEvent);        if (currentEvent) {            insertEventInto($currentEvents, $eventArticle, true);        } else {            insertEventInto($archivedEvents, $eventArticle);        }        checkCollapsedItemHeight($eventArticle.find('.expandable'));    });    handleAfterFetchEvents([$currentEvents, $archivedEvents]);};function insertEventInto($events, $event, prepend) {    if ($events.find('.event').length > 0) {        if (prepend) {            $events.prepend($('<hr>')).prepend($event);        } else {            $events.append($event).append($('<hr>'));        }    } else {        $events.html($event);    }}const handleFetchFacebookEventsFailed = function (error) {    console.error(error);    const $currentEvents = $('.current-events .events');    const $archivedEvents = $('.archived-events .events');    handleAfterFetchEvents([$currentEvents, $archivedEvents]);};function handleAfterFetchEvents($eventHolders) {    $eventHolders.forEach(function ($events) {        $events.find('.before-fetch').remove();        if ($events.find('.event').length > 0) {            $events.find('.no-events').remove()        } else {            $events.find('.no-events').removeAttr("hidden")        }    });}/*Collapsing adn expanding event text*/const onWindowResizeCheckExpandables = function (e) {    const $parent = $('.expandable-parent');    const $collapsed = $parent.find('.expandable').not('.expanded');    const $expanded = $parent.find('.expandable.expanded');    $.each($collapsed, function (index, item) {        let $item = $(item);        checkCollapsedItemHeight($item);    });    $.each($expanded, function (index, item) {        let $item = $(item);        checkExpandedItemHeight($item);    });};function checkCollapsedItemHeight($item) {    const $parent = $item.closest('.expandable-parent');    const height = $item.height();    const scrollHeight = $item[0].scrollHeight;    if (height < scrollHeight) {        $parent.find('.show-more-button[hidden]').removeAttr("hidden");    }}function checkExpandedItemHeight($item) {    const $parent = $item.closest('.expandable-parent');    const maxHeight = parseInt($item.attr("data-less"));    const height = $item.height();    if (!isNaN(maxHeight) && height > maxHeight) {        $parent.find('.show-less-button[hidden]').removeAttr("hidden");    }}const expandAndShowMore = function (e) {    e.preventDefault();    $(this).closest('.expandable-parent').find('.expandable').addClass("expanded");    $(this).prop("hidden", true);    $(this).siblings('.show-less-button').removeAttr("hidden");};const collapsAndShowLess = function (e) {    e.preventDefault();    $(this).closest('.expandable-parent').find('.expanded').removeClass("expanded");    $(this).prop("hidden", true);    $(this).siblings('.show-more-button').removeAttr("hidden");};/*Building articles*/function buildEventArticle(event, eventDate, currentEvent) {    const $eventArticle = $('#event-template').clone().removeAttr("id").removeAttr("hidden");    if (currentEvent) {        $eventArticle.attr("data-less", "144")    } else {        $eventArticle.attr("data-less", "96")    }    const $eventDateAndTime = buildEventDateAndTime(eventDate, currentEvent);    $eventArticle.find('.event-date').html($eventDateAndTime.date).append($eventDateAndTime.time);    const $eventDetail = $eventArticle.find('.detail');    const $eventLink = $eventDetail.find('.title');    const href = $eventLink.attr("href") + event.id;    $eventLink.attr("href", href).find('.name').text(event.name);    const $paragraphs = splitEventDescription(event.description);    $paragraphs.forEach(function ($p) {        $eventDetail.find('.detail-text').append($p);    });    return $eventArticle;}function buildEventDateAndTime(eventDate, currentEvent) {    const date = eventDate.getFullYear() + '-' + (eventDate.getMonth() + 1 + '').padStart(2, '0') + '-' + (eventDate.getDate() + '').padStart(2, '0');    const time = (eventDate.getHours() + '').padStart(2, '0') + ':' + (eventDate.getMinutes() + '').padStart(2, '0');    const datetime = date + ' ' + time;    const $eventDay = $('<span class="day">').text(eventDate.getDate());    const $eventMonth = $('<span class="month">').text(SHORT_MONTH_NAMES[eventDate.getMonth()].replace('.', ''));    const dateClass = (currentEvent) ? "bg-primary" : "bg-secondary";    return {        date: $('<time class="badge-date">').addClass(dateClass).attr("datetime", date).html($eventDay).append($eventMonth),        time: $('<time class="badge badge-md badge-dark">').attr("datetime", datetime).text(time)    };}function splitEventDescription(description) {    let $paragraphs = [];    if (description) {        let paragraphs = description.split(/[\r\n]{2,}/g);        paragraphs.forEach(function (p) {            let lines = p.split(/[\r\n]+/g);            $paragraphs.push($('<p>').html(lines.join("<br>")))        })    }    return $paragraphs;}$(function(){    initEvents();    $(document).on("click", '.show-more-button', expandAndShowMore)    $(document).on("click", '.show-less-button', collapsAndShowLess);});